// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@v0.1.0-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array-like-object@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-max@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import{isPrimitive as a}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@v0.2.0-esm/index.mjs";import{isPrimitive as p}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@v0.1.0-esm/index.mjs";import{primitives as d}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer-array@v0.1.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/function-ctor@v0.2.0-esm/index.mjs";var l={copy:!1,depth:i};function u(t,e){return s(e)?o(e,"depth")&&(t.depth=e.depth,!p(t.depth))?new TypeError(n("invalid option. `%s` option must be a nonnegative integer. Option: `%s`.","depth",t.depth)):o(e,"copy")&&(t.copy=e.copy,!a(t.copy))?new TypeError(n("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",t.copy)):null:new TypeError(n("invalid argument. Options argument must be an object. Value: `%s`.",e))}function c(t,e,n){var i,s;for(s=0;s<e.length;s++)i=e[s],n&&r(i)?c(t,i,n-1):t.push(i);return t}function h(t,i){var s,o,a;if(!r(t))throw new TypeError(n("invalid argument. First argument must be an array-like object. Value: `%s`.",t));if(s={copy:l.copy,depth:l.depth},arguments.length>1&&(o=u(s,i)))throw o;return a=0===s.depth?t:c([],t,s.depth),s.copy?e(a):a}function f(t){var e,r,n,i;for(n="return function flattenArray(x){",r=(e=t.length)-1,n+="var o=[];var ",i=0;i<e;i++)n+="i"+i,n+=i<r?",":";";for(i=0;i<e;i++)n+="for(i"+i+"=0;i"+i+"<"+t[i]+";i"+i+"++){";for(n+="o.push(x",i=0;i<e;i++)n+="[i"+i+"]";for(n+=");",i=0;i<e;i++)n+="}";return n+="return o;",n+="}",new m(n+="//# sourceURL=flatten_array.gen_fcn.js")()}function v(t){return function(e){if(!r(e))throw new TypeError(n("invalid argument. Must provide an array-like object. Value: `%s`.",e));return t(e)}}function j(t){return function(i){if(!r(i))throw new TypeError(n("invalid argument. Must provide an array-like object. Value: `%s`.",i));return e(t(i))}}function y(t,e){var r,i;if(!d(t))throw new TypeError(n("invalid argument. First argument must be an array of positive integers. Value: `%s`.",t));if(r=l.copy,arguments.length>1){if(!s(e))throw new TypeError(n("invalid argument. Options argument must be an object. Value: `%s`.",e));if(o(e,"copy")&&(r=e.copy,!a(r)))throw new TypeError(n("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",r))}return i=f(t),r?j(i):v(i)}t(h,"factory",y);export{h as default,y as factory};
//# sourceMappingURL=index.mjs.map
