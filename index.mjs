// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-copy@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-array-like-object@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-float64-max@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-nonnegative-integer@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-positive-integer-array@esm/index.mjs";var m={copy:!1,depth:i},l=s,u=o,c=a.isPrimitive,h=p.isPrimitive,v=n;var f=r;var j=function t(e,r,n){var i,s;for(s=0;s<r.length;s++)i=r[s],n&&f(i)?t(e,i,n-1):e.push(i);return e},y=e,g=r,b=n,w=m,x=function(t,e){return l(e)?u(e,"depth")&&(t.depth=e.depth,!h(t.depth))?new TypeError(v("invalid option. `%s` option must be a nonnegative integer. Option: `%s`.","depth",t.depth)):u(e,"copy")&&(t.copy=e.copy,!c(t.copy))?new TypeError(v("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",t.copy)):null:new TypeError(v("invalid argument. Options argument must be an object. Value: `%s`.",e))},E=j;var T=function(t,e){var r,n,i;if(!g(t))throw new TypeError(b("invalid argument. First argument must be an array-like object. Value: `%s`.",t));if(r={copy:w.copy,depth:w.depth},arguments.length>1&&(n=x(r,e)))throw n;return i=0===r.depth?t:E([],t,r.depth),r.copy?y(i):i};var V=function(t){var e,r,n,i;for(n="return function flattenArray(x){",r=(e=t.length)-1,n+="var o=[];var ",i=0;i<e;i++)n+="i"+i,n+=i<r?",":";";for(i=0;i<e;i++)n+="for(i"+i+"=0;i"+i+"<"+t[i]+";i"+i+"++){";for(n+="o.push(x",i=0;i<e;i++)n+="[i"+i+"]";for(n+=");",i=0;i<e;i++)n+="}";return n+="return o;",n+="}",n+="//# sourceURL=flatten_array.gen_fcn.js",new Function(n)()},O=r,k=n;var F=function(t){return function(e){if(!O(e))throw new TypeError(k("invalid argument. Must provide an array-like object. Value: `%s`.",e));return t(e)}},P=r,M=n,_=e;var A=function(t){return function(e){if(!P(e))throw new TypeError(M("invalid argument. Must provide an array-like object. Value: `%s`.",e));return _(t(e))}},L=d.primitives,R=s,U=o,q=a.isPrimitive,z=n,B=m,C=V,D=F,G=A;var H=T,I=function(t,e){var r,n;if(!L(t))throw new TypeError(z("invalid argument. First argument must be an array of positive integers. Value: `%s`.",t));if(r=B.copy,arguments.length>1){if(!R(e))throw new TypeError(z("invalid argument. Options argument must be an object. Value: `%s`.",e));if(U(e,"copy")&&(r=e.copy,!q(r)))throw new TypeError(z("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",r))}return n=C(t),r?G(n):D(n)};t(H,"factory",I);var J=H;export{J as default,I as factory};
//# sourceMappingURL=index.mjs.map
